#if UNITY_EDITOR

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Security.AccessControl;
using UnityEditor;
using UnityEditor.Build;
using UnityEditor.Build.Reporting;
using UnityEditor.Callbacks;
using UnityEngine;
using Debug = UnityEngine.Debug;

namespace Modules.Utilities
{
    public class UnityBuildSetting : IPostprocessBuildWithReport, IPreprocessBuildWithReport
    {
        private static void SendMessage(string _message)
        {
            Get(
                $"{_UnityBuildSettingInfo.m_APISend}{_message}");
        }

        private static string Get(string _uri)
        {
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(_uri);
            request.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate;

            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            using (Stream stream = response.GetResponseStream())
            using (StreamReader reader = new StreamReader(stream))
            {
                return reader.ReadToEnd();
            }
        }

        static string RunCommand(string _cmd)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = "/bin/zsh";
            start.Arguments = "-c \" " + _cmd + " \"";
            start.UseShellExecute = false; // Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true; // Any output, generated by application will be redirected back
            start.RedirectStandardError =
                true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                if (process != null)
                {
                    using (StreamReader reader = process.StandardOutput)
                    {
                        string stderr =
                            process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                        string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                        return result;
                    }
                }
                else
                {
                    return null;
                }
            }
        }

        static void CopyDirectory(string sourceDir, string destinationDir, bool recursive)
        {
            // Get information about the source directory
            var dir = new DirectoryInfo(sourceDir);

            // Check if the source directory exists
            if (!dir.Exists)
                throw new DirectoryNotFoundException($"Source directory not found: {dir.FullName}");

            // Cache directories before we start copying
            DirectoryInfo[] dirs = dir.GetDirectories();

            // Create the destination directory
            Directory.CreateDirectory(destinationDir);

            // Get the files in the source directory and copy to the destination directory
            foreach (FileInfo file in dir.GetFiles())
            {
                string targetFilePath = Path.Combine(destinationDir, file.Name);
                file.CopyTo(targetFilePath, true);
            }

            // If recursive and copying subdirectories, recursively call this method
            if (recursive)
            {
                foreach (DirectoryInfo subDir in dirs)
                {
                    string newDestinationDir = Path.Combine(destinationDir, subDir.Name);
                    CopyDirectory(subDir.FullName, newDestinationDir, true);
                }
            }
        }

        private static UnityBuildSettingInfo _UnityBuildSettingInfo;

        public int callbackOrder { get; }

        public void OnPreprocessBuild(BuildReport report)
        {
            Application.logMessageReceived += OnBuildError;

            if (_UnityBuildSettingInfo == null)
            {
                var guid = AssetDatabase.FindAssets("t:UnityBuildSettingInfo").FirstOrDefault();
                var assetPath = AssetDatabase.GUIDToAssetPath(guid);
                _UnityBuildSettingInfo = AssetDatabase.LoadAssetAtPath<UnityBuildSettingInfo>(assetPath);
            }
        }

        private void OnBuildError(string condition, string stacktrace, LogType type)
        {
            if (type == LogType.Error)
            {
                // FAILED TO BUILD, STOP LISTENING FOR ERRORS
                if (_UnityBuildSettingInfo.m_EnableSound)
                    RunCommand("afplay /System/Library/Sounds/Glass.aiff");
                Application.logMessageReceived -= OnBuildError;
                if (_UnityBuildSettingInfo.m_EnableSendMessage)
                    SendMessage($"[Build Fail!] \nName: {Application.productName} \nVersion: {Application.version}");
            }
        }

        public void OnPostprocessBuild(BuildReport report)
        {
            if (_UnityBuildSettingInfo != null)
            {
                if (_UnityBuildSettingInfo.m_EnableCopyFolder && _UnityBuildSettingInfo.m_CopyFolderNameList != null &&
                    (report.summary.platform == BuildTarget.StandaloneWindows ||
                     report.summary.platform == BuildTarget.StandaloneWindows64))
                    for (int i = 0; i < _UnityBuildSettingInfo.m_CopyFolderNameList.Count; i++)
                    {
                        var dirSrc = Path.Combine(Environment.CurrentDirectory,
                            _UnityBuildSettingInfo.m_CopyFolderNameList[i]);
                        var dirInfo = new DirectoryInfo(dirSrc);
                        var fileInfo = new FileInfo(report.summary.outputPath);
                        if (fileInfo.Directory == null) continue;
                        var dirTarget = Path.Combine(fileInfo.Directory.FullName, dirInfo.Name);
                        CopyDirectory(dirSrc, dirTarget, true);
                    }

                if (_UnityBuildSettingInfo.m_EnableSound)
                    RunCommand("afplay /System/Library/Sounds/Glass.aiff");

                if (_UnityBuildSettingInfo.m_EnableSendMessage)
                    SendMessage(
                        $"[Build Success!] \nName: {Application.productName} \nVersion: {Application.version} \nPlatform : {report.summary.platform}");
            }
            else
            {
                Debug.Log("No BuildSettingInfo.asset");
            }

            Application.logMessageReceived -= OnBuildError;
        }
    }
}

#endif